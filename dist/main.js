!function(){"use strict";var e=class{constructor(e,t,s){let{title:n,link:o}=e;this._title=n,this._link=o,this._cardSelector=t,this._handleImageClick=s,this._modalimage=document.querySelector("#modal-image"),this._modalImageTitle=document.querySelector(".modal__image-title")}getCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardTitleEl.textContent=this._title,this._cardImageEl=this._cardElement.querySelector(".card__image-card"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._title,this._setEventListeners(),this._cardElement}_setEventListeners(){this._cardElement.querySelector(".card__button-like").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__button-del").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardElement.querySelector(".card__image-display").addEventListener("click",(()=>this._handleImageClick(this)))}_handleLikeIcon(){this._cardElement.querySelector(".card__button-like").classList.toggle("card__button-like_active")}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this.toggleButtonState(this._inputElements,this._submitButton),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._toggleInputValidity(e),this.toggleButtonState(this._inputElements,this._submitButton)}))}))}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}toggleButtonState(){this._inputElements.every(this._hasInvalidInput)?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_toggleInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return e.validity.valid}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_isElementValid(){return this._inputElement.validity.valid}};class s{constructor(e){this._modalElement=document.querySelector(e),this._closeButton=this._modalElement.querySelector(".modal__close")}openModal(){this._modalElement.classList.add("modal_opened")}closeModal(){document.removeEventListener("keyup",this._handleEscUp),this._modalElement.removeEventListener("mousedown",this._handleMouseDown),this._modalElement.classList.remove("modal_opened")}_handleMouseDown(e){e.target.classList.contains("modal_opened")&&this.closeModal(e.target)}_handleEscUp(e){"Escape"===e.key&&this.closeModal()}setEventListeners(){document.addEventListener("keyup",(e=>{this._handleEscUp(e)})),this._modalElement.addEventListener("mousedown",(e=>this._handleMouseDown(e))),this._closeButton.addEventListener("click",(e=>{this.closeModal(e)}))}}class n extends s{constructor(e,t){super(e),this._popupForm=this._modalElement.querySelector(".modal__form"),this._modalInputs=this._popupForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._modalInputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._modalInput),this.closeModal()}))}closeModal(){this._popupForm.reset(),super.closeModal()}}const o=document.querySelector("#profile-add-form"),i=document.querySelector("#profile-edit-form"),r=document.querySelector(".profile"),l=r.querySelector(".profile__name"),a=r.querySelector(".profile__profession"),d=document.querySelector(".profile__button-edit"),c=document.querySelector(".modal__input-profession"),m=document.querySelector(".modal__input-name"),u=document.querySelector(".modal__input-title"),_=document.querySelector(".modal__input-image"),h=document.querySelector(".destinations"),p=document.querySelector(".profile__button-add"),E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-name_error",errorClass:"modal__error_visible"},v=new class{constructor(e,t){this._name=document.querySelector(e),this._profession=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,profession:this._profession.textContent}}setUserInfo(e,t){this._name.textContent=e.value,this._profession.textContent=t.value}}(".profile__name",".profile__profession"),g=new n("#editProfile-modal",(()=>{l.textContent=m.value,a.textContent=c.value,v.setUserInfo(m,c)}));g.setEventListeners(),d.addEventListener("click",(()=>{const e=v.getUserInfo();m.value=e.name,c.value=e.profession,g.openModal()}));const S=new n("#newCard-modal",(()=>{const t=u.value,s=_.value,n=new e({title:t,link:s},"#card-template").getCardElement();h.prepend(n)}));S.setEventListeners(),p.addEventListener("click",(()=>{S.openModal()}));const y=new class extends s{constructor(e){super(e),this._modalImageTitle=this._modalElement.querySelector(".modal__image-title"),this._modalImageLink=this._modalElement.querySelector(".modal__image-display")}openModal(e,t){super.openModal(),this._modalImageLink.src=t,this._modalImageTitle.textContent=e,this._modalImageTitle.alt=e}}("#viewImage-modal");y.setEventListeners();const f=new t(E,o),L=new t(E,i);f.enableValidation(),L.enableValidation(),new class{constructor(e,t){let{items:s,renderer:n}=e;this._renderItems=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._renderItems.forEach((e=>this.addItem(this._renderer(e))))}addItem(e){this._container.append(e)}}({items:[{title:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{title:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{title:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{title:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{title:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{title:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:t=>new e(t,"#card-template",(e=>{y.openModal(e._title,e._link)})).getCardElement()},".destinations").renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,