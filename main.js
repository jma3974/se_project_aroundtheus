!function(){"use strict";document.querySelector("#card-template");const e=document.querySelector("#profile-add-form"),t=document.querySelector("#profile-edit-form"),s=document.querySelector("#avatar-update-form"),r=(document.querySelector(".profile"),document.querySelector(".profile__button-edit")),i=document.querySelector(".profile__image-edit"),n=document.querySelector(".modal__input-profession"),o=document.querySelector(".modal__input-name"),a=document.querySelector(".modal__input-imageUrl"),l=document.querySelector(".profile__button-add");var d=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputValidity(e),this.toggleButtonState(this._inputElements,this._submitButton)}))}))}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}toggleButtonState(){this._inputElements.every(this._hasInvalidInput)?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_toggleInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return e.validity.valid}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class h{constructor(e){this._modalElement=document.querySelector(e),this._closeButton=this._modalElement.querySelector(".modal__close"),this.closeModal=this.closeModal.bind(this)}openModal(){this._modalElement.classList.add("modal_opened"),this._setEventListeners()}closeModal(){this._modalElement.classList.remove("modal_opened"),this._removeEventListeners()}_setEventListeners(){document.addEventListener("keyup",this._handleEscUp),this._modalElement.addEventListener("mousedown",this._handleMouseDown),this._closeButton.addEventListener("click",this.closeModal)}_removeEventListeners(){document.removeEventListener("keyup",this._handleEscUp),this._modalElement.removeEventListener("mousedown",this._handleMouseDown),this._closeButton.removeEventListener("click",this.closeModal)}_handleMouseDown=e=>{e.target.classList.contains("modal_opened")&&this.closeModal(e.target)};_handleEscUp=e=>{"Escape"===e.key&&this.closeModal()}}class _ extends h{constructor(e,t){super(e),this._popupForm=this._modalElement.querySelector(".modal__form"),this._modalInputs=this._popupForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t,this.subButton=this._popupForm.querySelector(".modal__button"),this.subButtonText=this.subButton.textContent}_handleSubmit=()=>{this._handleFormSubmit(this._getInputValues()).then((()=>{this.closeModal()})).finally((()=>{this.renderLoading(!1)}))};_getInputValues(){const e={};return this._modalInputs.forEach((t=>{e[t.name]=t.value})),e}_setEventListeners(){super._setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this._handleSubmit()}))}_removeEventListeners(){super._removeEventListeners(),this._popupForm.removeEventListener("submit",this._handleSubmit)}closeModal=()=>{this._popupForm.reset(),super.closeModal()};renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this.subButton.textContent=e?t:this.subButtonText}}const c=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.profession})}).then(this._checkResponse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}addDestinationCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})}).then(this._checkResponse)}delDestinationCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateCardLikes(e,t){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:t?"PUT":"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"a525747a-1396-48dd-bc2a-662500b37c81","Content-Type":"application/json"}}),u=e=>new class{constructor(e,t,s,r,i,n){let{cardDetails:o}=e;this._title=o.name,this._link=o.link,this._cardOwnerId=o.owner._id,this._id=o._id,this._cardSelector=s,this._likes=o.likes,this._likesCount=this._likes.length,this._myId=t,this._handleImageClick=r,this._handleDeleteClick=i,this._handleApiLike=n}getCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardTitleEl.textContent=this._title,this._cardImageEl=this._cardElement.querySelector(".card__image-card"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._title,this._cardLikesEl=this._cardElement.querySelector(".card__button-count"),this._cardLikesEl.textContent=this._getLikes(),this._trashEl=this._cardElement.querySelector(".card__button-del"),this._cardOwnerId!==this._myId&&this._trashEl.classList.add("card__button-del-inactive"),this.isLiked()&&this._cardElement.querySelector(".card__button-like").classList.add("card__button-like_active"),this._setEventListeners(),this._cardElement}_setEventListeners(){this._cardElement.querySelector(".card__button-like").addEventListener("click",(()=>{this._handleLike()})),this._cardElement.querySelector(".card__button-del").addEventListener("click",(()=>{this._handleDeleteClick(this,this._id)})),this._cardElement.querySelector(".card__image-display").addEventListener("click",(()=>this._handleImageClick(this._title,this._link)))}_handleLike(){this._cardElement.querySelector(".card__button-like").classList.toggle("card__button-like_active"),this._cardElement.querySelector(".card__button-like_active")?this._handleApiLike(this._id,!0).then((()=>{this.updateLikeCount(!0)})):this._handleApiLike(this._id,!1).then((()=>{this.updateLikeCount(!1)}))}_getLikes(){return this._likes.length}updateLikeCount(e){e?(this._likesCount++,this._cardLikesEl.textContent=this._likesCount):(this._likesCount--,this._cardLikesEl.textContent=this._likesCount)}isLiked(){return this._likes.some((e=>e._id===this._myId))}handleRemoveCard(){this._cardElement.remove(),this._cardElement=null}getUserID(){return this._ownerId._id}}({cardDetails:e},"85118cfaa5deb2aa40b27e18","#card-template",m,p,E).getCardElement(),m=(e,t)=>{y.openModal(e,t)},p=(e,t)=>{g.openModal(e,t)},E=(e,t)=>c.updateCardLikes(e,t).catch((e=>{console.error(e)})),v=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.reverse().forEach((e=>this.addItem(this._renderer(e))))}addItem(e){this._container.prepend(e)}}({renderer:u},".destinations");Promise.all([c.getUserInfo(),c.getInitialCards()]).then((e=>{let[t,s]=e;L.setUserInfo({userData:t}),L.setAvatar(t.avatar),v.renderItems(s)})).catch(console.error);const b={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-name_error",errorClass:"modal__error_visible"},L=new class{constructor(e,t,s){this._name=document.querySelector(e),this._profession=document.querySelector(t),this._avatarEl=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,profession:this._profession.textContent}}setUserInfo(e){let{userData:t}=e;this._name.textContent=t.name,this._profession.textContent=t.about,this._userID=t._id}getAvatar(){return{src:this._avatarEl.src}}setAvatar(e){this._avatarEl.src=e}}(".profile__name",".profile__profession",".profile__image"),S=new _("#editProfile-modal",(e=>c.updateUserInfo(e).then((t=>{const s={userData:{name:e.name,about:e.profession}};L.setUserInfo(s)})))),k=new _("#editAvatar-modal",(e=>{c.updateUserAvatar(e).then((t=>{e.avatar,L.setAvatar(e.avatar)}))}));i.addEventListener("click",(()=>{q.toggleButtonState();const e=L.getAvatar();a.value=e.src,k.openModal()})),r.addEventListener("click",(()=>{I.toggleButtonState();const e=L.getUserInfo();o.value=e.name,n.value=e.profession,S.openModal()}));const f=new _("#newCard-modal",(e=>c.addDestinationCard(e).then((e=>{const t=u(e);v.addItem(t)}))));l.addEventListener("click",(()=>{C.toggleButtonState(),f.openModal()}));const g=new class extends h{constructor(e,t){super(e),this._handleConfirmSubmit=t,this._popupForm=this._modalElement.querySelector(".modal__form"),this._modalInputs=this._popupForm.querySelectorAll(".modal__input")}openModal(e,t){super.openModal(),this._card=e,this._cardId=t}_handleSubmit=e=>{e.preventDefault(),this._handleConfirmSubmit(this._card,this._cardId),this.closeModal()};_setEventListeners(){super._setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}_removeEventListeners(){super._removeEventListeners(),this._popupForm.removeEventListener("submit",this._handleSubmit)}closeModal=()=>{this._popupForm.reset(),super.closeModal()}}("#deleteCard-modal",((e,t)=>c.delDestinationCard(t).then((()=>{e.handleRemoveCard()})))),y=new class extends h{constructor(e){super(e),this._modalImageTitle=this._modalElement.querySelector(".modal__image-title"),this._modalImageLink=this._modalElement.querySelector(".modal__image-display")}openModal(e,t){this._modalImageLink.src=t,this._modalImageTitle.textContent=e,this._modalImageTitle.alt=e,super.openModal()}closeModal=()=>{super.closeModal()}}("#viewImage-modal"),C=new d(b,e),I=new d(b,t),q=new d(b,s);C.enableValidation(),I.enableValidation(),q.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,